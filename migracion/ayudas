SET FOREIGN_KEY_CHECKS = 0;

TRUNCATE expedientes;

TRUNCATE contacto_paciente;

TRUNCATE referencia_contacto;

TRUNCATE TABLE consultas;

TRUNCATE TABLE pacientes;

SET FOREIGN_KEY_CHECKS = 1;

DROP Table union_old;

DROP Table noemergencia;

DROP Table siemergencia;

DROP TABLE nuevaexpediente;

DROP TABLE nuevapaciente;

DROP VIEW old_consultas;

DROP VIEW old_pacientes;

UPDATE nuevaconsulta SET paciente_id = NULL;

UPDATE nuevaconsulta SET consulta_id = NULL;

UPDATE nuevaconsulta u
JOIN nuevapaciente np ON u.nombre_completo = np.nombre_completo
SET
    u.paciente_id = np.id;

UPDATE nuevaconsulta nc
JOIN nuevaexpediente ne ON nc.paciente_id = ne.paciente_id
SET
    nc.consulta_id = ne.id;

SELECT COUNT(*)
FROM nuevaconsulta u
WHERE
    u.paciente_id IS NULL
    OR u.paciente_id = 0;

SELECT COUNT(*)
FROM nuevaconsulta u
WHERE
    u.consulta_id IS NULL
    OR u.consulta_id = 0;

SELECT id, nombre_completo, paciente_id
FROM nuevaconsulta u
WHERE
    u.consulta_id IS NULL
    OR u.consulta_id = 0
LIMIT 20;

SELECT COUNT(*) FROM nuevaconsulta WHERE paciente_id IS NULL;

SELECT hoja_emergencia, COUNT(*)
FROM nuevaexpediente
GROUP BY
    hoja_emergencia
HAVING
    COUNT(*) > 1;

-- 1. Crear una tabla temporal para manejar los duplicados
-- CREATE TEMPORARY TABLE temp_duplicados AS
-- SELECT id, hoja_emergencia, ROW_NUMBER() OVER (
--         PARTITION BY
--             hoja_emergencia
--         ORDER BY nombre_completo
--     ) AS row_num
-- FROM old_consultas
-- WHERE tipo_consulta = 3 AND
--     hoja_emergencia IN (
--         SELECT hoja_emergencia
--         FROM old_consultas
--         GROUP BY
--             hoja_emergencia
--         HAVING
--             COUNT(*) > 1
--     );

CREATE TEMPORARY TABLE temp_duplicados AS
SELECT id, hoja_emergencia, ROW_NUMBER() OVER (
        PARTITION BY
            hoja_emergencia
        ORDER BY nombre_completo
    ) AS row_num
FROM old_consultas
WHERE
    tipo_consulta = 3
    AND hoja_emergencia IN (
        SELECT hoja_emergencia
        FROM old_consultas
        WHERE
            tipo_consulta = 3
        GROUP BY
            hoja_emergencia
        HAVING
            COUNT(*) > 1
    );

-- 2. Actualizar los duplicados con sufijos
UPDATE old_consultas e
JOIN temp_duplicados t ON e.id = t.id
SET
    e.hoja_emergencia = CASE
        WHEN t.row_num = 1 THEN e.hoja_emergencia
        ELSE CONCAT(
            e.hoja_emergencia,
            CHAR(64 + t.row_num)
        )
    END
WHERE
    t.row_num <= 26;
-- Solo permitimos hasta 26 duplicados (A-Z)
-- 3. Verificar resultados
SELECT hoja_emergencia, COUNT(*)
FROM old_consultas
GROUP BY
    hoja_emergencia
HAVING
    COUNT(*) > 1;

SELECT
    id,
    paciente_id,
    consulta_id,
    expediente,
    hoja_emergencia,
    tipo_consulta,
    nombre_completo,
    nota
FROM union_old
WHERE
    nombre_completo LIKE '%xx%'
    AND expediente IS NULL;

SELECT expediente
FROM union_old
WHERE
    nombre_completo LIKE '%xx%'
    AND expediente IS NOT NULL;

CREATE TEMPORARY TABLE temp_duplicados AS
SELECT id, hoja_emergencia, ROW_NUMBER() OVER (
        PARTITION BY
            hoja_emergencia
        ORDER BY nombre_completo
    ) AS row_num
FROM old_consultas
WHERE
    tipo_consulta = 3
    AND hoja_emergencia IN (
        SELECT hoja_emergencia
        FROM old_consultas
        WHERE
            tipo_consulta = 3
        GROUP BY
            hoja_emergencia
        HAVING
            COUNT(*) > 1
    );

SELECT
    id,
    paciente_id,
    consulta_id,
    expediente,
    hoja_emergencia,
    tipo_consulta,
    nombre_completo,
    nota
FROM union_old
WHERE
    expediente IN (
        32970,
        37329,
        37975,
        40329,
        43086,
        44335,
        44530,
        62910,
        66463,
        65660
    )
ORDER BY expediente DESC;

UPDATE old_consultas oc
JOIN old_pacientes op ON oc.expediente = op.expediente
SET
    oc.nombre = op.nombre,
    oc.apellido = op.apellido,
    oc.nombre_completo = op.nombre_completo,
    oc.nota = 'paciente ingresado como xx xx'
WHERE
    op.expediente = 72539;

UPDATE old_consultas oc
JOIN old_pacientes op ON oc.expediente = op.expediente
SET
    oc.nombre = op.nombre,
    oc.apellido = op.apellido,
    oc.nombre_completo = op.nombre_completo,
    oc.nota = 'paciente ingresado como xx xx'
WHERE
    op.expediente = 73387;

SELECT
    id,
    paciente_id,
    consulta_id,
    expediente,
    hoja_emergencia,
    tipo_consulta,
    nombre_completo,
    nota
FROM nuevaconsulta
WHERE
    nombre_completo LIKE '%xx%';

AND expediente IS NULL;

SELECT
    id,
    paciente_id,
    consulta_id,
    expediente,
    hoja_emergencia,
    tipo_consulta,
    nombre_completo,
    nota
FROM nuevaconsulta
WHERE
    nombre_completo LIKE '%xx%';

SELECT DISTINCT
    consulta_id
FROM nuevaconsulta
WHERE
    id NOT IN(
        SELECT id
        FROM nuevaexpediente
    );

SELECT DISTINCT
    consulta_id
FROM nuevaconsulta
WHERE
    id IN (
        SELECT id
        FROM nuevaexpediente
    );

SELECT
    id,
    paciente_id,
    consulta_id,
    expediente,
    hoja_emergencia,
    nombre_completo
FROM consultas
WHERE
    consulta_id = 137447;

137447

UPDATE nuevaconsulta nc
JOIN nuevaexpediente ne ON nc.paciente_id = ne.paciente_id
SET
    nc.consulta_id = NULL;

SELECT
    id,
    exp_id,
    tipo_consulta,
    fecha_consulta
FROM consultas
WHERE
    exp_id = 137447;

UPDATE consultas nc
JOIN expediente ne ON nc.paciente_id = ne.paciente_id
SET
    nc.consulta_id = ne.id;